import telebot
import random
import sqlite3
import re
import time  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –¥–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫
from telebot import apihelper  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º apihelper –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 429

BOT_TOKEN = '7080454540:AAF3xHmY3jvIYQxD5etkalf3zRsC06MaPd0'
bot = telebot.TeleBot(BOT_TOKEN)

user_states = {}
chat_list = []
DATABASE_FILE = 'baza.db'
chat_settings = {}
AD_MESSAGE = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∫–ª–∞–º—ã –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ üìõ"
REACTIONS = ["üëç", "üëé", "‚ù§Ô∏è", "üî•", "üéâ", "üòä", "ü§î", "üòÇ"]

def create_table():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT NOT NULL,
            content TEXT UNIQUE
        )
    ''')
    conn.commit()
    conn.close()
    create_media_table()

def create_media_table():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_media (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            type TEXT NOT NULL,
            file_id TEXT NOT NULL,
            UNIQUE (chat_id, type, file_id)
        )
    ''')
    conn.commit()
    conn.close()

def save_message(message):
    if contains_link(message):
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
        return

    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()

    if message.text:
        try:
            cursor.execute("INSERT INTO messages (type, content) VALUES (?, ?)", ('text', message.text))
            conn.commit()
        except sqlite3.IntegrityError:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
            conn.rollback()
    elif message.sticker:
        try:
            cursor.execute("INSERT INTO messages (type, content) VALUES (?, ?)", ('sticker', message.sticker.file_id))
            conn.commit()
        except sqlite3.IntegrityError:
            print("–°—Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
            conn.rollback()
    elif message.photo:
        try:
            cursor.execute("INSERT INTO chat_media (chat_id, type, file_id) VALUES (?, ?, ?)",
                           (message.chat.id, 'photo', message.photo[-1].file_id))
            conn.commit()
        except sqlite3.IntegrityError:
            print("–§–æ—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
            conn.rollback()
    elif message.animation:
        try:
            cursor.execute("INSERT INTO chat_media (chat_id, type, file_id) VALUES (?, ?, ?)",
                           (message.chat.id, 'animation', message.animation.file_id))
            conn.commit()
        except sqlite3.IntegrityError:
            print("GIF —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
            conn.rollback()

    conn.close()

def get_random_message():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT type, content FROM messages ORDER BY RANDOM() LIMIT 1")
    result = cursor.fetchone()
    conn.close()
    return result

def get_random_media(chat_id, media_type):
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT file_id FROM chat_media WHERE chat_id = ? AND type = ? ORDER BY RANDOM() LIMIT 1", (chat_id, media_type))
    result = cursor.fetchone()
    conn.close()
    if result:
        return result[0]
    return None

create_table()

def contains_link(message):
    if message and message.text:
        link_pattern = re.compile(r'(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)|(t\.me/\S+)')
        return bool(link_pattern.search(message.text))
    return False

@bot.message_handler(commands=['start'], chat_types=['private'])
def start_private(message):
    inline_keyboard = telebot.types.InlineKeyboardMarkup()
    add_to_chat_button = telebot.types.InlineKeyboardButton(text="‚úè –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", url="https://t.me/vortox_bot?startgroup=true")
    subscribe_button = telebot.types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+wTYMzFT9ev9iYWMy")
    support_button = telebot.types.InlineKeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url="http://t.me/send?start=IVY5kyjDSlsV")
    settings_button = telebot.types.InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')

    inline_keyboard.add(add_to_chat_button)
    inline_keyboard.add(subscribe_button)
    inline_keyboard.add(support_button)
    inline_keyboard.add(settings_button)

    start_message = "–ü—Ä–∏–≤–µ—Ç üëã!\n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–æ—Ä—Ç–æ–∫—Å, —è –±–æ—Ç –¥–ª—è –±–µ—Å–µ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ. –¢–∞–∫–∂–µ –º–æ–≥—É —É–¥–∞–ª—è—Ç—å —Ä–µ–∫–ª–∞–º—É! –°–ª–µ–¥–∏—Ç–µ  –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –≤—Å–∫–æ—Ä–µ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ üéÅ\n\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É –∏ –¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    bot.send_message(message.chat.id, start_message, reply_markup=inline_keyboard)

@bot.message_handler(commands=['start'], chat_types=['group', 'supergroup'])
def start_group(message):
    pass

@bot.callback_query_handler(func=lambda call: call.data == 'settings')
def settings_callback(call):
    settings_keyboard = telebot.types.InlineKeyboardMarkup()
    add_chat_to_bot_button = telebot.types.InlineKeyboardButton(text="‚úè –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ –±–æ—Ç–∞", callback_data='add_chat')
    delete_chat_button = telebot.types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –±–æ—Ç–∞", callback_data='delete_chat_menu')
    chats_button = telebot.types.InlineKeyboardButton(text="üóÇ –ß–∞—Ç—ã", callback_data='chats')
    back_button = telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_main')

    settings_keyboard.add(add_chat_to_bot_button)
    settings_keyboard.add(delete_chat_button)
    settings_keyboard.add(chats_button)
    settings_keyboard.add(back_button)

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=settings_keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'add_chat')
def add_chat_callback(call):
    add_chat_keyboard = telebot.types.InlineKeyboardMarkup()
    added_button = telebot.types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data='added')
    back_button = telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_settings')

    add_chat_keyboard.add(added_button)
    add_chat_keyboard.add(back_button)

    message_step1 = "üìù –®–∞–≥ 1\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Å–∞–º–æ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö, –Ω–æ –≤—ã –∏–º —è–≤–ª—è–µ—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–±—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å."
    bot.send_message(call.message.chat.id, message_step1, reply_markup=add_chat_keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'added')
def added_callback(call):
    user_id = call.from_user.id
    message_step2 = "üìù –®–∞–≥ 2\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å t.me/...) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'private', –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞:"
    step2_keyboard = telebot.types.InlineKeyboardMarkup()
    back_button = telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_step1')
    step2_keyboard.add(back_button)

    bot.send_message(call.message.chat.id, message_step2, reply_markup=step2_keyboard)
    user_states[user_id] = 'waitin
